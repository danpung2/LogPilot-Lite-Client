// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: proto/logpilot.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "logpilot";

export interface LogRequest {
  channel: string;
  level: string;
  message: string;
  meta: { [key: string]: string };
  storage: string;
}

export interface LogRequest_MetaEntry {
  key: string;
  value: string;
}

export interface LogResponse {
  status: string;
  message: string;
}

export interface ListLogsRequest {
  storage: string;
  channel: string;
  level: string;
  fromTimestamp: number;
  toTimestamp: number;
}

export interface ListLogsResponse {
  logs: LogEntry[];
}

export interface FetchLogsRequest {
  since: string;
  channel: string;
  limit: number;
  storage: string;
}

export interface FetchLogsResponse {
  logs: LogEntry[];
}

export interface LogEntry {
  channel: string;
  level: string;
  message: string;
  meta: { [key: string]: string };
  timestamp: number;
}

export interface LogEntry_MetaEntry {
  key: string;
  value: string;
}

function createBaseLogRequest(): LogRequest {
  return { channel: "", level: "", message: "", meta: {}, storage: "" };
}

export const LogRequest: MessageFns<LogRequest> = {
  encode(message: LogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channel !== "") {
      writer.uint32(10).string(message.channel);
    }
    if (message.level !== "") {
      writer.uint32(18).string(message.level);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    Object.entries(message.meta).forEach(([key, value]) => {
      LogRequest_MetaEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.storage !== "") {
      writer.uint32(42).string(message.storage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.level = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = LogRequest_MetaEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.meta[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.storage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogRequest {
    return {
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      level: isSet(object.level) ? globalThis.String(object.level) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      meta: isObject(object.meta)
        ? Object.entries(object.meta).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      storage: isSet(object.storage) ? globalThis.String(object.storage) : "",
    };
  },

  toJSON(message: LogRequest): unknown {
    const obj: any = {};
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.level !== "") {
      obj.level = message.level;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.meta) {
      const entries = Object.entries(message.meta);
      if (entries.length > 0) {
        obj.meta = {};
        entries.forEach(([k, v]) => {
          obj.meta[k] = v;
        });
      }
    }
    if (message.storage !== "") {
      obj.storage = message.storage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogRequest>, I>>(base?: I): LogRequest {
    return LogRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogRequest>, I>>(object: I): LogRequest {
    const message = createBaseLogRequest();
    message.channel = object.channel ?? "";
    message.level = object.level ?? "";
    message.message = object.message ?? "";
    message.meta = Object.entries(object.meta ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.storage = object.storage ?? "";
    return message;
  },
};

function createBaseLogRequest_MetaEntry(): LogRequest_MetaEntry {
  return { key: "", value: "" };
}

export const LogRequest_MetaEntry: MessageFns<LogRequest_MetaEntry> = {
  encode(message: LogRequest_MetaEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogRequest_MetaEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogRequest_MetaEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogRequest_MetaEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LogRequest_MetaEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogRequest_MetaEntry>, I>>(base?: I): LogRequest_MetaEntry {
    return LogRequest_MetaEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogRequest_MetaEntry>, I>>(object: I): LogRequest_MetaEntry {
    const message = createBaseLogRequest_MetaEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseLogResponse(): LogResponse {
  return { status: "", message: "" };
}

export const LogResponse: MessageFns<LogResponse> = {
  encode(message: LogResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogResponse {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: LogResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogResponse>, I>>(base?: I): LogResponse {
    return LogResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogResponse>, I>>(object: I): LogResponse {
    const message = createBaseLogResponse();
    message.status = object.status ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseListLogsRequest(): ListLogsRequest {
  return { storage: "", channel: "", level: "", fromTimestamp: 0, toTimestamp: 0 };
}

export const ListLogsRequest: MessageFns<ListLogsRequest> = {
  encode(message: ListLogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.storage !== "") {
      writer.uint32(10).string(message.storage);
    }
    if (message.channel !== "") {
      writer.uint32(18).string(message.channel);
    }
    if (message.level !== "") {
      writer.uint32(26).string(message.level);
    }
    if (message.fromTimestamp !== 0) {
      writer.uint32(32).int64(message.fromTimestamp);
    }
    if (message.toTimestamp !== 0) {
      writer.uint32(40).int64(message.toTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.storage = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.level = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.fromTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.toTimestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLogsRequest {
    return {
      storage: isSet(object.storage) ? globalThis.String(object.storage) : "",
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      level: isSet(object.level) ? globalThis.String(object.level) : "",
      fromTimestamp: isSet(object.fromTimestamp) ? globalThis.Number(object.fromTimestamp) : 0,
      toTimestamp: isSet(object.toTimestamp) ? globalThis.Number(object.toTimestamp) : 0,
    };
  },

  toJSON(message: ListLogsRequest): unknown {
    const obj: any = {};
    if (message.storage !== "") {
      obj.storage = message.storage;
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.level !== "") {
      obj.level = message.level;
    }
    if (message.fromTimestamp !== 0) {
      obj.fromTimestamp = Math.round(message.fromTimestamp);
    }
    if (message.toTimestamp !== 0) {
      obj.toTimestamp = Math.round(message.toTimestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLogsRequest>, I>>(base?: I): ListLogsRequest {
    return ListLogsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLogsRequest>, I>>(object: I): ListLogsRequest {
    const message = createBaseListLogsRequest();
    message.storage = object.storage ?? "";
    message.channel = object.channel ?? "";
    message.level = object.level ?? "";
    message.fromTimestamp = object.fromTimestamp ?? 0;
    message.toTimestamp = object.toTimestamp ?? 0;
    return message;
  },
};

function createBaseListLogsResponse(): ListLogsResponse {
  return { logs: [] };
}

export const ListLogsResponse: MessageFns<ListLogsResponse> = {
  encode(message: ListLogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.logs) {
      LogEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.logs.push(LogEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLogsResponse {
    return { logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => LogEntry.fromJSON(e)) : [] };
  },

  toJSON(message: ListLogsResponse): unknown {
    const obj: any = {};
    if (message.logs?.length) {
      obj.logs = message.logs.map((e) => LogEntry.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLogsResponse>, I>>(base?: I): ListLogsResponse {
    return ListLogsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLogsResponse>, I>>(object: I): ListLogsResponse {
    const message = createBaseListLogsResponse();
    message.logs = object.logs?.map((e) => LogEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFetchLogsRequest(): FetchLogsRequest {
  return { since: "", channel: "", limit: 0, storage: "" };
}

export const FetchLogsRequest: MessageFns<FetchLogsRequest> = {
  encode(message: FetchLogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.since !== "") {
      writer.uint32(10).string(message.since);
    }
    if (message.channel !== "") {
      writer.uint32(18).string(message.channel);
    }
    if (message.limit !== 0) {
      writer.uint32(24).int32(message.limit);
    }
    if (message.storage !== "") {
      writer.uint32(34).string(message.storage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchLogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchLogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.since = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.storage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchLogsRequest {
    return {
      since: isSet(object.since) ? globalThis.String(object.since) : "",
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      storage: isSet(object.storage) ? globalThis.String(object.storage) : "",
    };
  },

  toJSON(message: FetchLogsRequest): unknown {
    const obj: any = {};
    if (message.since !== "") {
      obj.since = message.since;
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.storage !== "") {
      obj.storage = message.storage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FetchLogsRequest>, I>>(base?: I): FetchLogsRequest {
    return FetchLogsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FetchLogsRequest>, I>>(object: I): FetchLogsRequest {
    const message = createBaseFetchLogsRequest();
    message.since = object.since ?? "";
    message.channel = object.channel ?? "";
    message.limit = object.limit ?? 0;
    message.storage = object.storage ?? "";
    return message;
  },
};

function createBaseFetchLogsResponse(): FetchLogsResponse {
  return { logs: [] };
}

export const FetchLogsResponse: MessageFns<FetchLogsResponse> = {
  encode(message: FetchLogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.logs) {
      LogEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchLogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchLogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.logs.push(LogEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchLogsResponse {
    return { logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => LogEntry.fromJSON(e)) : [] };
  },

  toJSON(message: FetchLogsResponse): unknown {
    const obj: any = {};
    if (message.logs?.length) {
      obj.logs = message.logs.map((e) => LogEntry.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FetchLogsResponse>, I>>(base?: I): FetchLogsResponse {
    return FetchLogsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FetchLogsResponse>, I>>(object: I): FetchLogsResponse {
    const message = createBaseFetchLogsResponse();
    message.logs = object.logs?.map((e) => LogEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLogEntry(): LogEntry {
  return { channel: "", level: "", message: "", meta: {}, timestamp: 0 };
}

export const LogEntry: MessageFns<LogEntry> = {
  encode(message: LogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channel !== "") {
      writer.uint32(10).string(message.channel);
    }
    if (message.level !== "") {
      writer.uint32(18).string(message.level);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    Object.entries(message.meta).forEach(([key, value]) => {
      LogEntry_MetaEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.timestamp !== 0) {
      writer.uint32(40).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.level = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = LogEntry_MetaEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.meta[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogEntry {
    return {
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      level: isSet(object.level) ? globalThis.String(object.level) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      meta: isObject(object.meta)
        ? Object.entries(object.meta).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: LogEntry): unknown {
    const obj: any = {};
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.level !== "") {
      obj.level = message.level;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.meta) {
      const entries = Object.entries(message.meta);
      if (entries.length > 0) {
        obj.meta = {};
        entries.forEach(([k, v]) => {
          obj.meta[k] = v;
        });
      }
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogEntry>, I>>(base?: I): LogEntry {
    return LogEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogEntry>, I>>(object: I): LogEntry {
    const message = createBaseLogEntry();
    message.channel = object.channel ?? "";
    message.level = object.level ?? "";
    message.message = object.message ?? "";
    message.meta = Object.entries(object.meta ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

function createBaseLogEntry_MetaEntry(): LogEntry_MetaEntry {
  return { key: "", value: "" };
}

export const LogEntry_MetaEntry: MessageFns<LogEntry_MetaEntry> = {
  encode(message: LogEntry_MetaEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogEntry_MetaEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogEntry_MetaEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogEntry_MetaEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LogEntry_MetaEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogEntry_MetaEntry>, I>>(base?: I): LogEntry_MetaEntry {
    return LogEntry_MetaEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogEntry_MetaEntry>, I>>(object: I): LogEntry_MetaEntry {
    const message = createBaseLogEntry_MetaEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

export type LogServiceService = typeof LogServiceService;
export const LogServiceService = {
  sendLog: {
    path: "/logpilot.LogService/SendLog",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LogRequest): Buffer => Buffer.from(LogRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): LogRequest => LogRequest.decode(value),
    responseSerialize: (value: LogResponse): Buffer => Buffer.from(LogResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): LogResponse => LogResponse.decode(value),
  },
  listLogs: {
    path: "/logpilot.LogService/ListLogs",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListLogsRequest): Buffer => Buffer.from(ListLogsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListLogsRequest => ListLogsRequest.decode(value),
    responseSerialize: (value: ListLogsResponse): Buffer => Buffer.from(ListLogsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListLogsResponse => ListLogsResponse.decode(value),
  },
  fetchLogs: {
    path: "/logpilot.LogService/FetchLogs",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FetchLogsRequest): Buffer => Buffer.from(FetchLogsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): FetchLogsRequest => FetchLogsRequest.decode(value),
    responseSerialize: (value: FetchLogsResponse): Buffer => Buffer.from(FetchLogsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): FetchLogsResponse => FetchLogsResponse.decode(value),
  },
} as const;

export interface LogServiceServer extends UntypedServiceImplementation {
  sendLog: handleUnaryCall<LogRequest, LogResponse>;
  listLogs: handleUnaryCall<ListLogsRequest, ListLogsResponse>;
  fetchLogs: handleUnaryCall<FetchLogsRequest, FetchLogsResponse>;
}

export interface LogServiceClient extends Client {
  sendLog(request: LogRequest, callback: (error: ServiceError | null, response: LogResponse) => void): ClientUnaryCall;
  sendLog(
    request: LogRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LogResponse) => void,
  ): ClientUnaryCall;
  sendLog(
    request: LogRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LogResponse) => void,
  ): ClientUnaryCall;
  listLogs(
    request: ListLogsRequest,
    callback: (error: ServiceError | null, response: ListLogsResponse) => void,
  ): ClientUnaryCall;
  listLogs(
    request: ListLogsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListLogsResponse) => void,
  ): ClientUnaryCall;
  listLogs(
    request: ListLogsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListLogsResponse) => void,
  ): ClientUnaryCall;
  fetchLogs(
    request: FetchLogsRequest,
    callback: (error: ServiceError | null, response: FetchLogsResponse) => void,
  ): ClientUnaryCall;
  fetchLogs(
    request: FetchLogsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FetchLogsResponse) => void,
  ): ClientUnaryCall;
  fetchLogs(
    request: FetchLogsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FetchLogsResponse) => void,
  ): ClientUnaryCall;
}

export const LogServiceClient = makeGenericClientConstructor(LogServiceService, "logpilot.LogService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): LogServiceClient;
  service: typeof LogServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
